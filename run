#!/usr/bin/env bash
set -euo pipefail

# --- pick a Python ---
if command -v py >/dev/null 2>&1; then
  PY=py
elif command -v python3 >/dev/null 2>&1; then
  PY=python3
elif command -v python >/dev/null 2>&1; then
  PY=python
else
  echo "Error: Python not found (looked for py, python3, then python)." >&2
  exit 1
fi

# --- pick a pip compatible with that Python ---
if "$PY" -m pip --version >/dev/null 2>&1; then
  # Use pip module from the chosen Python (best practice)
  PIP_CMD=("$PY" -m pip)
elif command -v pip >/dev/null 2>&1; then
  PIP_CMD=(pip)
elif command -v pip3 >/dev/null 2>&1; then
  PIP_CMD=(pip3)
else
  echo "Error: pip not found for $PY (tried '$PY -m pip', then pip, then pip3)." >&2
  exit 1
fi

cmd="${1:-}"
case "$cmd" in
  install)
    "${PIP_CMD[@]}" install -e '.[dev]'
    echo "Install complete."
    ;;
  test)
    "$PY" - <<'PY'
import sys, subprocess, json, re
# 1) Run pytest (shows pass/fail)
res = subprocess.run([sys.executable, "-m", "pytest", "-q"], text=True)
# 2) Run coverage
subprocess.run([sys.executable, "-m", "coverage", "run", "-m", "pytest", "-q"], check=False)
# 3) Get JSON totals
subprocess.run([sys.executable, "-m", "coverage", "json", "-o", "coverage.json"], check=False)
pct = "0%"
try:
    with open("coverage.json", "r", encoding="utf-8") as f:
        data = json.load(f)
        pct_val = data.get("totals", {}).get("percent_covered", 0.0)
        pct = f"{pct_val:.0f}%"
except Exception:
    pass
# 4) Count tests (pass/fail) from a quiet re-run
out = subprocess.run([sys.executable, "-m", "pytest", "-q"], capture_output=True, text=True).stdout
passed = 0; total = 0
m_pass = re.search(r"(\d+)\s+passed", out)
if m_pass: passed = int(m_pass.group(1))
m_all = re.findall(r"(\d+)\s+(?:passed|failed|skipped|xpassed|xfailed|errors?)", out)
if m_all: total = sum(int(x) for x in m_all)
if total == 0: total = passed
print(f"{passed}/{total} test cases passed. {pct} line coverage achieved.")
sys.exit(0 if res.returncode == 0 else 1)
PY
    ;;
  *)
    "$PY" -m acmecli.main "$@"
    ;;
esac
